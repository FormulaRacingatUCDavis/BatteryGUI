/* autogenerated by Processing revision 1281 on 2023-03-06 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.Arrays;
import processing.serial.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Battery_GUI extends PApplet {

 /*

*/




int num_subpacks = 5;
int num_cell_temps = 24;
int num_board_temps = 7;
int num_voltages = 24;

Serial myPort;
Subpack[] subpacks = new Subpack[num_subpacks];

 public void setup() {
  //fullScreen();
  //parse();
  /* size commented out by preprocessor */;
  frameRate(1);
  background(0);
    for(int i = 0; i < subpacks.length; i++){
    subpacks[i] = new Subpack();
    subpacks[i].subpackNumber = i+1;
    subpacks[i].drawSubpack(!(i>2) ? 0 : width/2, ((i%3) * (height/3-100)), width/2, height/3-100);
    
  }
  myPort =  new Serial(this, Serial.list()[0], 115200);
}


 public void draw() {
  background(0);
  //parse_buffer();
  for(int i = 0; i < subpacks.length; i++){
    //subpacks[i] = new Subpack();
    //subpacks[i].subpackNumber = i+1;
    subpacks[i].drawSubpack(!(i>2) ? 0 : width/2, ((i%3) * (height/3-100)), width/2, height/3-100); 
  }  
}


 public void serialEvent (Serial myPort) {
  int b = myPort.read();
  byte_in(b);
}
int ESCAPE_CHAR = 0x05;
int FRAME_START = 0x01;
int FRAME_END = 0x0A;

boolean escaped = false;        //true if last character was escape
int[] buffer = new int[400];  //store incoming bytes
int i = 0; 

 public void byte_in(int b_in){
  if(b_in < 0 || b_in > 255){
    return;
  }
  int b = b_in;
  
  if(escaped){
    if(b == FRAME_START){           //reset buffer
      i = 0;
    } else if(b == FRAME_END){      //buffer is finished, parse data
      parse_buffer();
    } else if(b == ESCAPE_CHAR){    //byte is escape character
      buffer[i] = b;
      i++;
    }
    escaped = false;
    return;
  }
  
  if(b == ESCAPE_CHAR){    //check for escape
    escaped = true;
  } else {
    buffer[i] = b;
    i++;
  }
}

int expected_len = num_subpacks * (num_cell_temps + num_board_temps + 2*num_voltages);
//        num of sub      1byte/celltemp   1byte/boardtemp   2 bytes/cell voltage
    
 public void parse_buffer(){
  if(i != expected_len){  //check if buffer has correct amout of bytes
    return;
  }
  
  println("Data received!");
    
  int k = 0;
  for(int j = 0; j < num_subpacks; j++){    
    
    for(int n = 0; n < num_voltages; n++){
      subpacks[j].cellVoltages[n] = PApplet.parseFloat((256*buffer[k])+buffer[k+1])/10000; //16 bit 10ths of millivolt --> float volts
      k+=2;
    }
    
    for(int n = 0; n < num_board_temps; n++){
      subpacks[j].boardTemps[n] = buffer[k];
      k++;
    }
    
    for(int n = 0; n < num_cell_temps; n++){
      subpacks[j].cellTemps[n] = buffer[k];
      k++;
    }
    
  }
}
   
   
      
  
    
public static class Stats{
  public static float mean(float[] vals){
    float sum = 0;
    for(int i = 0; i < vals.length; i++){
      sum+= vals[i];
    }
    return sum/vals.length;
  }
  
  public static float median(float[] vals){
    return vals[vals.length/2];
  }
  
  public static float min(float[] vals){
    float[] tempArr = Arrays.copyOf(vals, vals.length);
    Arrays.sort(tempArr);
    return tempArr[0];
  }
    public static float max(float[] vals){
    float[] tempArr = Arrays.copyOf(vals, vals.length);
    Arrays.sort(tempArr);
    return tempArr[tempArr.length - 1];
  }
  
  public static float firstQuartile(float[] vals){
    float[] tempArr = Arrays.copyOf(vals, vals.length);
    Arrays.sort(tempArr);
    return tempArr[vals.length/4];
  }
  
  public static float thirdQuartile(float[] vals){
    float[] tempArr = Arrays.copyOf(vals, vals.length);
    
    Arrays.sort(tempArr);
    return tempArr[vals.length*3/4];
  }
  
  public static float findIQR(float[] vals){
    return thirdQuartile(vals) - firstQuartile(vals);
  }
  public static boolean isOutlier(int index, float[] vals){
    if(vals[index] > 1.5f * findIQR(vals)){
      return true;
    }
    return false;
  }
  
  public static boolean isOutlier(float value, float[] vals){
    if(value > 1.5f * findIQR(vals)){
      return true;
    }
    return false;
  }
}
public class Subpack{
  public static final float AMBIENTTEMP = 25.0f;
  public int subpackNumber;
  public int[] cellTemps = new int[num_cell_temps];
  public int[] boardTemps = new int[num_board_temps];
  public float[] cellVoltages = new float[num_voltages];
  
  float acceptableVoltageDifference = 0.05f;
  float worryingVoltageDifference = 0.08f;
  
  final int CYAN = color(0xFF00FFFF);
  final int PURPLE = color(0xFFFFA0FF);
  final int ORANGE = color(0xFFFFE090);
  
  int textSize = 14;
  int padding = 40;
  
  public Subpack(){
    //for testing
    for(int i = 0; i < cellTemps.length; i++){
     cellTemps[i] = PApplet.parseInt(random(AMBIENTTEMP-10, 30)); 
    }
    for(int i = 0; i < boardTemps.length; i++){
     boardTemps[i] = PApplet.parseInt(random(AMBIENTTEMP - 10,30)); 
    }
    for(int i = 0; i < cellVoltages.length; i++){
     cellVoltages[i] = random(3,3.08f); 
    }
  }
  
  public Subpack(int[] cellTemperatures, int[] boardTemperatures, float[] cellVoltages, int subpackNumber){
    this.cellTemps = cellTemperatures;
    this.boardTemps = boardTemperatures;
    this.cellVoltages = cellVoltages;
    this.subpackNumber = subpackNumber;
  }
  
  public void drawSubpack(int xPos, int yPos, int subpackWindowWidth, int subpackWindowHeight){
    //
    //FRAME SETUP
    //
    int boardTempXPos = xPos;
    int voltageXPos = xPos + subpackWindowWidth*25/100;
    int cellTempXPos = xPos + subpackWindowWidth*65/100;
    
    int subpackWidth = subpackWindowWidth * 2;
    int subpackHeight = subpackWindowHeight * 3;
    stroke(255);
    fill(0);
    strokeWeight(4);
    rect(xPos, yPos, subpackWidth/2, subpackHeight/3);
    strokeWeight(1);
    line(voltageXPos, yPos, voltageXPos, yPos + subpackWindowHeight);
    line(cellTempXPos, yPos, cellTempXPos, yPos + subpackWindowHeight);
    fill(255);
    textSize(subpackHeight/(3*17));
    text("Subpack " + subpackNumber, xPos + subpackWindowWidth * 90/100, yPos + subpackHeight/(3*17));
    
    //
    //BOARD TEMPERATURES
    //
    
    int textX;
    int textY;
    fill(255);
    textSize(textSize);
    
    text("Board Temps", xPos + subpackWidth/200, yPos + textSize);
    
    int gb = 255;
    for(int j = 0; j < num_board_temps; j++){
        gb = 255;
        if(boardTemps[j] > AMBIENTTEMP){
          gb = 255-(int)map(boardTemps[j], AMBIENTTEMP, 60, 150,255);
        }
          
        textY = yPos + j*textSize + padding;
        textX = boardTempXPos + padding;
        
        fill(gb == 255 ? color(0,255,0) : color(255, gb, gb));   //set fill color for color sqare
        rect(textX - 20, textY - textSize, textSize, textSize); //draw color square
        
        if(j < 4) fill(CYAN);
        else if(j < 7)  fill(PURPLE);
        else fill(ORANGE);
        
        try{
          text("Board Temp " + str(j) + ": " + str(boardTemps[j]), textX, textY);
        }
        catch(Exception e){
          System.out.println("Oh man it didn't like that float");
        }
      
    }
    
    //
    //CELL VOLTAGES
    //

    int cellVoltageTextXPos = voltageXPos + padding;
    
    fill(255);
    text("Cell Voltages",cellVoltageTextXPos, yPos + textSize);
    line(xPos, yPos + textSize + 2, xPos + subpackWidth/2, yPos + textSize + 2);
    
    for(int i = 0; i < cellVoltages.length; i++){
      
      textX = (i < cellVoltages.length /2) ? (cellVoltageTextXPos): (cellVoltageTextXPos + 120);
      textY = yPos + i%(cellVoltages.length/2)*textSize + padding;
      
      if(i < 12) fill(CYAN);
      else if(i < 24) fill(PURPLE);
      else fill(ORANGE);

      try{
        text("Cell " + (i+1) + ": " + (i < 9 ? "  " : "") + str(cellVoltages[i]), textX, textY);
      }
      catch(Exception e){
        System.out.println("Oh man it didn't like that float");
      }
      
      //draw boxes
      if(cellVoltages[i] - Stats.min(cellVoltages) > worryingVoltageDifference){
        fill(255,0,0);
      }
      else if(cellVoltages[i] - Stats.min(cellVoltages) > acceptableVoltageDifference){
        fill(255,255,0);
      }
      else{
        fill(0,255,0);
      }
      rect(textX - 20, textY - textSize, textSize, textSize);
    }
    
    //
    //CELL TEMPERATURES
    //
    
    int textXPos = cellTempXPos + padding; 
    fill(255);
    text("Cell Temps", xPos + subpackWidth*37/100, yPos + textSize);
    
    for(int i = 0; i < cellTemps.length; i++){
      
      if(cellTemps[i] > AMBIENTTEMP){
        gb = 255-(int)map(cellTemps[i], AMBIENTTEMP, 60, 150, 255);
      }
      else{
        gb = 255;
      }
      
      textX = (i < cellTemps.length /2) ? (textXPos): (textXPos + 120);
      textY = yPos + i%(num_cell_temps/2)*textSize + padding;
      
      fill(gb == 255 ? color(0,255,0) : color(255, gb, gb));
      rect(textX - 20, textY - textSize, textSize, textSize);
      
      if(i < 12) fill(CYAN);
      else if(i < 24) fill(PURPLE);
      else fill(ORANGE);
      
      try{
        text("Cell Temp " + i + ": " + str(cellTemps[i]), textX, textY);
      }
      catch(Exception e){
        System.out.println("Oh man it didn't like that float");
      }
    }
  }
}


  public void settings() { size(1500, 1000); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Battery_GUI" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
